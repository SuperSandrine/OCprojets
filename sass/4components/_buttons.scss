button {
  cursor: pointer;
  border: none;
}

.button__cta {
  /*les boutons violets, présents sur accueil et menu*/
  @include background-radgrad;
  width: fit-content;
  height: 50px;
  color: $colour-achromatic;
  border-radius: 25px;
  padding: 0 20px;
  box-shadow: 3px 3px 10px rgb(200, 200, 200);
  transition: background 3s, box-shadow 4400ms;
  &:hover {
    background: radial-gradient(
      at 30% -90%,
      lighten($colour-secondary, 10%) 20px,
      lighten($colour-primary, 10%)
    );
    box-shadow: 8px 8px 15px rgb(170, 170, 170);
  }
}

// bouton de la section fonctionnement sur accueil
.box {
  width: 97%;
  position: relative;
  margin-bottom: 20px;
  &__label {
    position: absolute;
    z-index: 2;
    left: -15px;
    top: calc((65px - 30px) / 2);
    background-color: $colour-primary;
    height: 30px;
    width: 30px;
    border-radius: 15px;
    color: $colour-achromatic;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  &__button {
    /* - les boutons de fonctionnement, présents sur home, gris > violet
       - choix d'un alignement des i et textes sur la gauche (et non centré) pour les garder groupés*/
    display: flex;
    justify-content: flex-start;
    align-items: center;
    position: relative;
    width: 100%;
    height: 65px;
    font-weight: 500;
    border-radius: 15px;
    box-shadow: 3px 3px 10px rgb(220, 220, 220);
    background-color: backeti($colour-darkachromatic);
    i {
      padding: 0 25px;
      color: $colour-darkachromatic;
    }
    &:hover {
      background-color: backeti($colour-primary);
      i {
        color: $colour-primary;
      }
    }
    span {
      display: flex;
      justify-content: center;
      align-items: center;
    }
  }
}

.like {
  // Au clic, il devra se remplir progressivement. Pour cette première version,
  // l’effet peut être apparaître au survol sur desktop au lieu du clic.
  &--empty {
    display: none;
  }
  padding: 3px 2px 0 2px;
  background: linear-gradient(
    to bottom,
    transparent 50%,
    $colour-secondary 7px,
    $colour-primary
  );
  color: transparent;
  background-clip: border-box;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-size: 1.3rem;
  cursor: cell;
  //TODO trouver la grosse main en cursor
  -webkit-text-stroke: 2px black; //dessine une ligne autour d'un text
  transition: all ease-in 400ms;
  background-size: 1% 200%;
  &:hover {
    background-position: 0 -100%;
    -webkit-text-stroke: 2px transparent;
  }
}

.header__button {
  /*les boutons du header de menu pour revenir à accueil*/
  background: none;
  color: black;
  display: unset;
  position: absolute;
  top: 30px;
  left: 10px;
  padding: 0 20px;
}

/* les boutons pour valider choix,
    apparaissent avec un survol
    Le visiteur peut ajouter les plats qu'il souhaite 
    à sa commande en cliquant dessus. Cela fait 
    apparaître une petite coche à droite du plat. 
    Cette coche devra coulisser de la droite vers 
    la gauche. Pour cette première version, l’effet 
    peut apparaître au survol sur desktop au lieu du 
    clic. Si l’intitulé du plat est trop long, il devra 
    être rogné avec des points de suspension. Un exemple 
    de l’effet attendu est fourni.*/
.dish {
  display: flex;
  align-items: center;
  background-color: white;
  border-radius: 20px;
  height: 80px;
  box-shadow: 3px 3px 5px rgb(220, 220, 220);
  &__description {
    padding: 20px 20px;
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    h3 {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      padding-right: 40px;
    }
    &__details {
      display: flex;
      justify-content: space-between;
      p {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        padding-right: 10px;
      }
      span {
        text-align: right;
      }
    }
  }
  &__selection {
    background-color: $colour-accent;
    color: white;
    height: 80px;
    min-width: 0px;
    max-width: 0px;
    border-radius: 0 20px 20px 0;
    overflow: hidden;
    transition: min-width 600ms;
    i {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100%;
      font-weight: 600;
      font-size: 1.5rem;
      transform: rotate(-240deg);
      transition: transform 500ms 100ms ease-in-out;
    }
  }
  &:hover {
    cursor: pointer;
    // TODO trouver la grosse main
    .dish__selection {
      min-width: 80px;
      i {
        font-size: 1.5rem;
        transform: rotate(-0deg);
      }
    }
  }
  transform: translateY(50%);
  opacity: 0;
  animation: section-menu $anim-dur forwards
    cubic-bezier(0.88, 0.47, 0.12, 1.09);
  @for $i from 1 through $num-section {
    &--#{$i} {
      animation-delay: (($anim-delay * $i) + 200ms);
      //l'animation delay ne fonctionne pas comme mon test sur codepen >
      //problème résolu lié à la syntaxe d'interpolation et au BEM
      //TODO vérifier exception dans cours de animation delay
    }
  }
}

@keyframes section-menu {
  0% {
    transform: translateY(50%); //pour que le dish arrive de loin, mettre 1300%
    opacity: 0;
  }
  75% {
    opacity: 0.3; //crée un décallage entre la position et la transparence
  }
  100% {
    transform: translateY(0%);
    opacity: 1;
  }
}
